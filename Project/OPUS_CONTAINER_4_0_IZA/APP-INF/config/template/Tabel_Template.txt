/*=========================================================
*Copyright(c) ${Date} CyberLogitec
*@FileName : ${FILE_NAME}.java
*@FileTitle : ${FILE_NAME}
*Open Issues :
*Change history :
*@LastModifyDate : ${Date_dey}
*@LastModifier : ${USER_NAME}
*@LastVersion : 1.0
* ${Date_dey} ${USER_NAME} 
* 1.0 Creation
=========================================================*/

package ${PACKAGE};

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.clt.framework.component.common.AbstractValueObject;
import com.clt.framework.component.util.JSPUtil;

/**
 * Table Value Ojbect<br>
 * 관련 Event 에서 생성, 서버실행요청시 Data 전달역할을 수행하는 Value Object
 *
 * @author ${USER_NAME}
 * @since J2EE 1.6
 * @see AbstractValueObject
 */

public class ${FILE_NAME} extends AbstractValueObject {

	private static final long serialVersionUID = 1L;
	
	private Collection<${FILE_NAME}> models = new ArrayList<${FILE_NAME}>();
	
#foreach( $key in $COLUMN_NAME.keySet())
	/* $COMMENTS.get($key) */
	private String $COLUMN_NAME.get($key) = null;
#end

	/*	테이블 컬럼의 값을 저장하는 Hashtable */
	private HashMap<String, String> hashColumns = new LinkedHashMap<String, String>();

	/*	테이블 컬럼에 대응되는 멤버변수를 저장하는 Hashtable */
	private HashMap<String, String> hashFields = new LinkedHashMap<String, String>();
	
	public ${FILE_NAME}() {}

	public ${FILE_NAME}(${FILE_COLUMN}) {
#foreach( $key in $COLUMN_NAME.keySet())
		this.$COLUMN_NAME.get($key) = $COLUMN_NAME.get($key);
#end
	}
	
	/**
	 * 테이블 컬럼에 저장할 값을 Hashtable<"column_name", "value"> 로 반환
	 * @return HashMap
	 */
	public HashMap<String, String> getColumnValues(){
#foreach( $key in $COLUMN_NAME.keySet())
		this.hashColumns.put("$TABLECOLNAME.get($key)", get$COLUMN_NAME_M.get($key)());
#end		
		return this.hashColumns;
	}
	
	/**
	 * 컬럼명에 대응되는 멤버변수명을 저장하여 Hashtable<"column_name", "variable"> 로 반환   
	 * @return
	 */
	public HashMap<String, String> getFieldNames(){
#foreach( $key in $COLUMN_NAME.keySet())
		this.hashFields.put("$TABLECOLNAME.get($key)", "$COLUMN_NAME.get($key)");
#end		
		return this.hashFields;
	}
	
#foreach( $key in $COLUMN_NAME.keySet())
	/**
	 * $COMMENTS.get($key)
	 * @return $COLUMN_NAME.get($key)
	 */
	public String get$COLUMN_NAME_M.get($key)() {
		return this.$COLUMN_NAME.get($key);
	}
	
#end

#foreach( $key in $COLUMN_NAME.keySet())
	/**
	 * $COMMENTS.get($key)
	 * @param $COLUMN_NAME.get($key)
	 */
	public void set$COLUMN_NAME_M.get($key)(String $COLUMN_NAME.get($key)) {
		this.$COLUMN_NAME.get($key) = $COLUMN_NAME.get($key);
	}
	
#end
/**
	 * Request 의 데이터를 추출하여 VO 의 멤버변수에 설정.
	 * @param request
	 */
	public void fromRequest(HttpServletRequest request) {
		fromRequest(request,"");
	}

	/**
	 * Request 의 데이터를 추출하여 VO 의 멤버변수에 설정.
	 * @param request
	 */
	public void fromRequest(HttpServletRequest request, String prefix) {
#foreach( $key in $COLUMN_NAME_M.keySet())
		set$COLUMN_NAME_M.get($key)(JSPUtil.getParameter(request, prefix + "$TABLECOLNAME.get($key)", ""));
#end
	}

	/**
	 * Request 의 데이터를 VO 배열로 변환하여 반환.
	 * @param request
	 * @return ${FILE_NAME}[]
	 */
	public ${FILE_NAME}[] fromRequestGrid(HttpServletRequest request) {
		return fromRequestGrid(request, "");
	}

	/**
	 * Request 넘어온 여러 건 DATA를 VO Class 에 담는다. 
	 * @param request
	 * @param prefix
	 * @return ${FILE_NAME}[]
	 */
	public ${FILE_NAME}[] fromRequestGrid(HttpServletRequest request, String prefix) {
		${FILE_NAME} model = null;
		
		String[] tmp = request.getParameterValues(prefix + "ibflag");
  		if(tmp == null)
   			return null;

  		int length = request.getParameterValues(prefix + "ibflag").length;
  
		try {
#foreach( $key in $COLUMN_NAME_M.keySet())
			String[] $COLUMN_NAME.get($key) = (JSPUtil.getParameter(request, prefix	+ "$TABLECOLNAME.get($key)", length));
#end
			
			for (int i = 0; i < length; i++) {
				model = new ${FILE_NAME}();
#foreach( $key in $COLUMN_NAME.keySet())
				if ($COLUMN_NAME.get($key)[i] != null)
					model.set$COLUMN_NAME_M.get($key)($COLUMN_NAME.get($key)[i]);
#end
				models.add(model);
			}

		} catch (Exception e) {
			return null;
		}
		return get${FILE_NAME}s();
	}

	/**
	 * VO 배열을 반환
	 * @return ${FILE_NAME}[]
	 */
	public ${FILE_NAME}[] get${FILE_NAME}s(){
		${FILE_NAME}[] vos = (${FILE_NAME}[])models.toArray(new ${FILE_NAME}[models.size()]);
		return vos;
	}
	
	/**
	 * VO Class의 내용을 String으로 변환
	 */
	public String toString() {
		   return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE );
	   }

	/**
	* 포맷팅된 문자열에서 특수문자 제거("-","/",",",":")
	*/
	public void unDataFormat(){
#foreach( $key in $COLUMN_NAME.keySet())
		this.$COLUMN_NAME.get($key) = this.$COLUMN_NAME.get($key) .replaceAll(",", "").replaceAll("-", "").replaceAll("/", "").replaceAll(":", "");
#end
	}
}
