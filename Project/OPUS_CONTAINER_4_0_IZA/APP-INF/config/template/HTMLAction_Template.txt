/*=========================================================
*Copyright(c) ${Date} CyberLogitec
*@FileName : ${FILE_NAME}.java
*@FileTitle : ${FILE_TITLE}
*Open Issues :
*Change history :
*@LastModifyDate : ${Date_dey}
*@LastModifier : ${USER_NAME}
*@LastVersion : 1.0
* ${Date_dey} ${USER_NAME}
* 1.0 Creation
=========================================================*/
package ${PACKAGE};

import javax.servlet.http.HttpServletRequest;
import com.clt.framework.core.controller.html.HTMLActionException;
import com.clt.framework.core.layer.event.Event;
import com.clt.framework.core.layer.event.EventResponse;
import com.clt.framework.support.controller.HTMLActionSupport;
import com.clt.framework.support.controller.html.FormCommand;

#foreach( $key in $Import.keySet())
import $Import.get($key)
#end

/**
 * HTTP Parser<br>
 * - ${SC_PACKAGE} 화면을 통해 서버로 전송되는 HTML DOM 객체의 Value를 자바 변수로 Parsing<br>
 * - Parsing 한 정보를 Event로 변환, request에 담아 ${SC}SC로 실행요청<br>
 * - ${SC}SC에서 View(JSP)로 실행결과를 전송하는 EventResponse를 request에 셋팅<br>
 * @author ${EN_NAME}
 * @see ${SC}Event 참조
 * @since J2EE 1.6
 */

public class ${FILE_NAME} extends HTMLActionSupport {

	private static final long serialVersionUID = 1L;
	/**
	 * ${FILE_NAME} 객체를 생성
	 */
	public ${FILE_NAME}() {}

	/**
	 * HTML DOM 객체의 Value를 자바 변수로 Parsing<br>
	 * HttpRequst의 정보를 ${SC}Event로 파싱하여 request에 셋팅<br>
	 * @param request HttpServletRequest HttpRequest
	 * @return Event Event interface를 구현한 객체
	 * @exception HTMLActionException
	 */
	public Event perform(HttpServletRequest request) throws HTMLActionException {
		
    	FormCommand command = FormCommand.fromRequest(request);
		${EventName} event = new ${EventName}();
		
#set($num = 0)
#foreach( $key in $Enty_Name_m.keySet())
#if($num == 0)
		if(command.isCommand(FormCommand.MULTI$Enty_Num_m.get($key))) {
			event.set$Enty_Name.get($key)S(($Enty_Name.get($key)[])getVOs(request, $Enty_Name.get($key) .class,""));
		}
#set($num = 1)
#else
		else if(command.isCommand(FormCommand.MULTI$Enty_Num_m.get($key))) {
			event.set$Enty_Name.get($key)S(($Enty_Name.get($key)[])getVOs(request, $Enty_Name.get($key) .class,""));
		}
#end
#end
#foreach( $key in $Enty_Name_s.keySet())
#if($num == 0)

		if(command.isCommand(FormCommand.SEARCH$Enty_Num_s.get($key))) {
			event.set$Enty_Name.get($key)(($Enty_Name.get($key))getVO(request, $Enty_Name.get($key) .class));
		}
#set($num = 1)
#else
		else if(command.isCommand(FormCommand.SEARCH$Enty_Num_s.get($key))) {
			event.set$Enty_Name.get($key)(($Enty_Name.get($key))getVO(request, $Enty_Name.get($key) .class));
		}
#end
#end

		return  event;
	}

	/**
	 * HttpRequest의 attribute에 업무시나리오 수행결과 값 저장<br>
	 * ServiceCommand에서 View(JSP)로 실행결과를 전송하는 ResultSet을 request에 셋팅<br>
	 * 
	 * @param request HttpServletRequest HttpRequest
	 * @param eventResponse EventResponse interface를 구현한 객체
	 */
	public void doEnd(HttpServletRequest request, EventResponse eventResponse) {
		request.setAttribute("EventResponse", eventResponse);
	}

	/**
	 * HttpRequest의 attribute에 HttpRequest 파싱 수행결과 값 저장<br>
	 * HttpRequest 파싱 수행결과 값 request에 셋팅<br>
	 * 
	 * @param request HttpServletRequest HttpRequest
	 * @param event Event interface를 구현한 객체
	 */
	public void doEnd(HttpServletRequest request, Event event) {
		request.setAttribute("Event", event);
	}
}