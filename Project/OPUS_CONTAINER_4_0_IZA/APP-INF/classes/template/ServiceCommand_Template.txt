/*=========================================================
*Copyright(c) ${Date} CyberLogitec
*@FileName : ${FILE_NAME}.java
*@FileTitle : ${FILE_TITLE}
*Open Issues :
*Change history :
*@LastModifyDate : ${Date_dey}
*@LastModifier : ${USER_NAME}
*@LastVersion : 1.0
* ${Date_dey} ${USER_NAME}
* 1.0 Creation
=========================================================*/
package ${PACKAGE};

import java.util.List;
import ${BC_P}.${BC}BC;
import ${BC_P}.${BC}BCImpl;
import ${eventPackage}.${eventName};
import com.clt.framework.core.layer.event.Event;
import com.clt.framework.core.layer.event.EventException;
import com.clt.framework.core.layer.event.EventResponse;
import com.clt.framework.component.message.ErrorHandler;
import com.clt.framework.core.layer.event.GeneralEventResponse;
import com.clt.framework.support.controller.html.FormCommand;
import com.clt.framework.support.layer.service.ServiceCommandSupport;
import com.clt.framework.support.view.signon.SignOnUserAccount;
#foreach( $key in $Import.keySet())
import $Import.get($key)
#end


/**
 * ALPS-${SC} Business Logic ServiceCommand - ALPS-${SC} 대한 비지니스 트랜잭션을 처리한다.
 * 
 * @author ${EN_NAME}
 * @see ${BC}DBDAO
 * @since J2EE 1.6
 */

public class ${FILE_NAME} extends ServiceCommandSupport {
	// Login User Information
	private SignOnUserAccount account = null;

	/**
	 * ${SC} system 업무 시나리오 선행작업<br>
	 * 업무 시나리오 호출시 관련 내부객체 생성<br>
	 */
	public void doStart() {
		log.debug("${SC}SC 시작");
		try {
			// 일단 comment --> 로그인 체크 부분
			account = getSignOnUserAccount();
		} catch (Exception e) {
			log.error(e.getLocalizedMessage());
		}
	}

	/**
	 * ${SC} system 업무 시나리오 마감작업<br>
	 * 업무 시나리오 종료시 관련 내부객체 해제<br>
	 */
	public void doEnd() {
		log.debug("${SC}SC 종료");
	}

	/**
	 * 각 이벤트에 해당하는 업무 시나리오 수행<br>
	 * ALPS-${SC} system 업무에서 발생하는 모든 이벤트의 분기처리<br>
	 * 
	 * @param e Event
	 * @return EventResponse
	 * @exception EventException
	 */
	public EventResponse perform(Event e) throws EventException {
		// RDTO(Data Transfer Object including Parameters)
		EventResponse eventResponse = null;

		// SC가 여러 이벤트를 처리하는 경우 사용해야 할 부분
		if (e.getEventName().equalsIgnoreCase("${eventName}")) {
#set($num = 0)
#if(${search})
#foreach( $key in $Smethod.keySet())
#if($num == 0)
			if (e.getFormCommand().isCommand(FormCommand.$Scommand.get($key))) {
				eventResponse = $Smethod.get($key)(e);
			}
#set($num = 1)
#else
			else if (e.getFormCommand().isCommand(FormCommand.$Scommand.get($key))) {
				eventResponse = $Smethod.get($key)(e);
			}
#end
#end
#end
#if(${multi})
#foreach( $key in $Menti.keySet())
#if($num == 0)
			if (e.getFormCommand().isCommand(FormCommand.$Mcommand.get($key))) {
				eventResponse = $Mmethod.get($key)(e);
			}
#set($num = 1)
#else
			else if (e.getFormCommand().isCommand(FormCommand.$Mcommand.get($key))) {
				eventResponse = $Mmethod.get($key)(e);
			}
#end
#end
#end
		}
		return eventResponse;
	}
#if(${search})
#foreach( $key in $Smethod.keySet())
	/**
	 * ${UI} : [이벤트]<br>
	 * [비즈니스대상]을 [행위]합니다.<br>
	 * 
	 * @param Event e
	 * @return EventResponse
	 * @exception EventException
	 */
	private EventResponse $Smethod.get($key)(Event e) throws EventException {
		// PDTO(Data Transfer Object including Parameters)
		GeneralEventResponse eventResponse = new GeneralEventResponse();
		${eventName} event = (${eventName})e;
		${BC}BC command = new ${BC}BCImpl();

		try{
			List<$Smethod_m.get($key)> list = command.$Smethod.get($key)(event.get$Smethod_m.get($key)());
			eventResponse.setRsVoList(list);
		}catch(EventException ex){
			throw new EventException(new ErrorHandler(ex).getMessage(),ex);
		}catch(Exception ex){
			throw new EventException(new ErrorHandler(ex).getMessage(),ex);
		}	
		return eventResponse;
	}
#end
#end
#if(${multi})
#foreach( $key in $Menti.keySet())
	/**
	 * ${UI} : [이벤트]<br>
	 * [비즈니스대상]을 [행위]합니다.<br>
	 *
	 * @param Event e
	 * @return EventResponse
	 * @exception EventException
	 */
	private EventResponse $Mmethod.get($key)(Event e) throws EventException {
		// PDTO(Data Transfer Object including Parameters)
		GeneralEventResponse eventResponse = new GeneralEventResponse();
		${eventName} event = (${eventName})e;
		${BC}BC command = new ${BC}BCImpl();
		try{
			begin();
			command.$Mmethod.get($key)(event.get$Mmethod_m.get($key)S(),account);
			eventResponse.setUserMessage(new ErrorHandler("XXXXXXXXX").getUserMessage());
			commit();
		} catch(EventException ex) {
			rollback();
			throw new EventException(new ErrorHandler(ex).getMessage(),ex);
		} catch(Exception ex) {
			rollback();
			throw new EventException(new ErrorHandler(ex).getMessage(),ex);
		}
		return eventResponse;
	}
#end
#end
}